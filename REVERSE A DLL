# Python program to reverse a doubly
# linked list using recursion

class Node:
    def __init__(self, val):
        self.data = val
        self.next = None
        self.prev = None

# Recursive function to reverse a doubly linked list
def reverse(curr):
  
    # Base case: if the list is empty or we reach the end of the list
    if curr is None:
        return None

    # Swap the next and prev pointers
    temp = curr.prev
    curr.prev = curr.next
    curr.next = temp

    # If the previous node (after swap) is null, this is the new head
    if curr.prev is None:
        return curr

    # Recurse for the next node
    return reverse(curr.prev)

def print_list(node):
    while node is not None:
        print(node.data, end=" ")
        node = node.next
    print()

if __name__ == "__main__":
  
    # Create a hard-coded doubly linked list:
    # 1 <-> 2 <-> 3 <-> 4
    head = Node(1)
    head.next = Node(2)
    head.next.prev = head
    head.next.next = Node(3)
    head.next.next.prev = head.next
    head.next.next.next = Node(4)
    head.next.next.next.prev = head.next.next

    print("Original Linked list")
    print_list(head)
    head = reverse(head)
    print("\nReversed Linked list")
    print_list(head)
